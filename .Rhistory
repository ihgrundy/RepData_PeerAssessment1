y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo= 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", Sean")
end()
patients <- c("Bill", "Gina", "Kelly", Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints <0)
all(ints>0)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$animate, flags$landmass, summary)
tapply(flags$population, flags$landmass, summary)
set.seed(1)
rpois(5, 2)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(1)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1,size = 100, prob = 0.7)
flips2 <- rbinom(1,size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
data(mtcars)
play()
str(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
mymat <- cbind(sample(1:10), LETTERS[1:10], c(1,2,3))
mymat
smat <- order(mymat,mymat[,3])
?order
smat <- mymat[order(mymat[,3]),1:3]
smat
tapply(smat,smat[,3],mean)
tapply(smat[,1:3],smat[,3],mean)
mymat <- cbind(sample(1:10), LETTERS[1:10], c(1,2,3))
mymat
smat <- mymat[order(mymat[,3]),1:3]
smat
dfmat <- as.data.frame(smat)
dfmat
?tapply
tapply(dfmat[,1],dfmat[,3],mean)
class(dfmat)
class(dfmat[,1])
tapply(as.numeric(dfmat[,1]),dfmat[,3],mean)
tapply(dfmat,dfmat[,3],order,dfmat[,1])
tapply(as.numeric(dfmat),dfmat[,3],order,dfmat[,1])
tfmat <- dfmat[,c(1,3)]
tfmat
tapply(as.numeric(tfmat),tfmat[,2],order,tfmat[,1])
tfmat <- as.numeric(dfmat[,c(1,3)])
tfmat <- cbind(as.numeric(dfmat[,1]), as.numeric(dfmat[,2]))
tfmat
tapply(tfmat,tfmat[,2],order,tfmat[,1])
tfmat <- cbind(as.numeric(dfmat[,1]), as.numeric(dfmat[,3]))
tfmat
tapply(tfmat,tfmat[,2],order,tfmat[,1])
tapply(tfmat,tfmat[,2],order)
tapply(tfmat,tfmat[,2],mean)
tapply(tfmat[,1],tfmat[,2],mean)
tapply(tfmat[,1],tfmat[,2],order)
tfmat[tapply(tfmat[,1],tfmat[,2],order)]
tapply(tfmat[,1],tfmat[,2],order)
tapply(tfmat[,1:2],tfmat[,2],order)
tapply(tfmat[,1],tfmat[,2],order)
tapply(tfmat[,1],tfmat[,2],order,tfmat[,1])
?order
tapply(tfmat[,1],tfmat[,2],order,partial = tfmat[,1])
tapply(tfmat[,1],tfmat[,2],order,tfmat[,1])
info(order)
tapply(tfmat[,1],tfmat[,2],sort,tfmat[,1])
tapply(tfmat[,1],tfmat[,2],sort,partial=tfmat[,1])
str(order)
mymat <- cbind(sample(1:10), LETTERS[1:10], c(1,2,3))
mymat
smat <- mymat[order(mymat[,3]),1:3]
smat
dfmat <- as.data.frame(smat)
dfmat
tapply(as.numeric(dfmat[,1]),dfmat[,3],mean)    ## dfmat[,1] is classed as factor!
tfmat <- dfmat[,c(1,3)]
tfmat
tapply(as.numeric(dfmat[,1]),dfmat[,3],sum)
tapply(as.numeric(dfmat[,1]),dfmat[,3],sort)
tapply(as.numeric(dfmat[,1]),dfmat[,3],count)
tapply(as.numeric(dfmat[,1]),dfmat[,3],add)
tapply(as.numeric(dfmat[,1]),dfmat[,3],order)
?simplify
sapply(as.numeric(dfmat[,1]),dfmat[,3],order)
tapply(as.numeric(dfmat[,1]),dfmat[,3],order)
as.matrix(tapply(as.numeric(dfmat[,1]),dfmat[,3],order))
dfmat[tapply(as.numeric(dfmat[,1]),dfmat[,3],order),1:2]
dfmat[vector(tapply(as.numeric(dfmat[,1]),dfmat[,3],order)),1:2]
install.packages("RMySQL")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id,package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 | r_os == "linux-gnu")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3, 5, NA, 10)).
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(dplyr)
cran
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum,count>679)
top_counts <- filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unigue <- filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, value, -grade)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data=res, col=sex_class, into=c("sex","class"))
submit()
students3
submit
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
play()
library(dplyr)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
# Spread and gather are complements
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))
df %>% spread(x, y) %>% gather(x, y, a:b, na.rm = TRUE)
nxt()
submit()
submit()
extract_numeric("class5")
submit()
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status="passed")
passed <- mutate(passed, status="passed")
passed
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment)
this_moment <-  update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + days(15) + minutes(50)
arrive <- depart + days(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive,tzone="Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
getwd()
save.image("~/useful.RData")
load("~/useful.RData")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(BodyWeight)
str(BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | Month, data = airquality)
plot(p)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
plot(p)
library(datasets)
data(airquality)
head(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
x <- rnorm(100)
x
?rnorm
y <- rnorm(100,1,5)
z <- rbind(x,y)
z
w <-cbind(x,y)
w
x <- c(rnorm(100), rnorm(100,1,5))
x
hist(x)
?normal
qqnorm(x)
?cauchy
y <- rcauchy(100)
y
qqnorm(y)
y <- rcauchy(100)
qqnorm(y)
z <- rnorm(100)
qqnorm(z)
setwd("~/Documents/Reproducible Research/Assignment 1/RepData_PeerAssessment1")
